name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Java Services Tests
  test-java-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, api-gateway, plan-service, user-service, video-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Grant execute permission for gradlew
        run: chmod +x services/${{ matrix.service }}/gradlew
        working-directory: services/${{ matrix.service }}
      
      - name: Run tests with Gradle
        run: ./gradlew test
        working-directory: services/${{ matrix.service }}
      
      - name: Build JAR
        run: ./gradlew build -x test
        working-directory: services/${{ matrix.service }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: services/${{ matrix.service }}/build/test-results/
          retention-days: 30

  # Python Services Tests
  test-python-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [llm-agent, video-worker]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: services/${{ matrix.service }}
      
      - name: Run tests with pytest
        run: pytest -v
        working-directory: services/${{ matrix.service }}
      
      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./services/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  # Lint and Format Check
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Python Lint
        run: |
          pip install black flake8
          black --check services/llm-agent/
          flake8 services/llm-agent/
      
      - name: Java Format Check
        run: |
          cd services/auth-service && chmod +x gradlew
          ./gradlew check
        if: always()

  # Build Docker Images (on main branch)
  build-docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test-java-services, test-python-services]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Auth Service
        uses: docker/build-push-action@v5
        with:
          context: services/auth-service/
          push: true
          tags: sw6820/oddiya-auth-service:latest,sw6820/oddiya-auth-service:${{ github.sha }}
      
      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: services/api-gateway/
          push: true
          tags: sw6820/oddiya-api-gateway:latest,sw6820/oddiya-api-gateway:${{ github.sha }}
      
      - name: Build and push Plan Service
        uses: docker/build-push-action@v5
        with:
          context: services/plan-service/
          push: true
          tags: sw6820/oddiya-plan-service:latest,sw6820/oddiya-plan-service:${{ github.sha }}
      
      - name: Build and push User Service
        uses: docker/build-push-action@v5
        with:
          context: services/user-service/
          push: true
          tags: sw6820/oddiya-user-service:latest,sw6820/oddiya-user-service:${{ github.sha }}
      
      - name: Build and push Video Service
        uses: docker/build-push-action@v5
        with:
          context: services/video-service/
          push: true
          tags: sw6820/oddiya-video-service:latest,sw6820/oddiya-video-service:${{ github.sha }}
      
      - name: Build and push LLM Agent
        uses: docker/build-push-action@v5
        with:
          context: services/llm-agent/
          push: true
          tags: sw6820/oddiya-llm-agent:latest,sw6820/oddiya-llm-agent:${{ github.sha }}
      
      - name: Build and push Video Worker
        uses: docker/build-push-action@v5
        with:
          context: services/video-worker/
          push: true
          tags: sw6820/oddiya-video-worker:latest,sw6820/oddiya-video-worker:${{ github.sha }}

